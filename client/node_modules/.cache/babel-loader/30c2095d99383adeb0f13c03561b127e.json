{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react', 'prop-types'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'), require('prop-types'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.React, global.propTypes);\n    global.ToggleDisplay = mod.exports;\n  }\n})(this, function (exports, _react, _propTypes) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = ToggleDisplay;\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  ToggleDisplay.propTypes = {\n    tag: _propTypes2.default.string,\n    hide: _propTypes2.default.bool,\n    show: _propTypes2.default.bool,\n    if: _propTypes2.default.bool\n  };\n  ToggleDisplay.defaultProps = {\n    tag: 'span'\n  };\n  var propsToRemove = Object.keys(ToggleDisplay.propTypes);\n\n  function isDefined(val) {\n    return val != null;\n  }\n\n  function shouldHide(props) {\n    if (isDefined(props.show)) {\n      return !props.show;\n    } else if (isDefined(props.hide)) {\n      return props.hide;\n    }\n\n    return false;\n  }\n\n  function pickProps(props) {\n    var newProps = Object.assign({}, props);\n    propsToRemove.forEach(function (prop) {\n      if (prop in newProps) {\n        delete newProps[prop];\n      }\n    });\n    return newProps;\n  }\n\n  function ToggleDisplay(props) {\n    if (props.if === false) {\n      return null;\n    }\n\n    var style = {};\n\n    if (shouldHide(props)) {\n      style.display = 'none';\n    }\n\n    var Tag = props.tag; // prevent our props from being leaked down onto the children\n\n    var newProps = pickProps(props);\n    return _react2.default.createElement(Tag, _extends({\n      style: style\n    }, newProps));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}